---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: kube-system
  labels:
    app: grafana
    role: monitoring
data:
  ${grafana_config}
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-basic-auth
  namespace: kube-system
data:
  auth: ${basic_auth_b64}
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-tls
  namespace: kube-system
data:
  tls.crt: ${grafana_crt_b64}
  tls.key: ${grafana_key_b64}
type: kubernetes.io/tls
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    ingress.kubernetes.io/auth-realm: Authentication Required
    ingress.kubernetes.io/auth-secret: grafana-basic-auth
    ingress.kubernetes.io/auth-type: basic
    kubernetes.io/ingress.class: nginx
  name: grafana
  namespace: kube-system
spec:
  rules:
  - host: grafana.${ingress}
    http:
      paths:
      - backend:
          serviceName: grafana
          servicePort: 3000
        path: /
  tls:
  - hosts:
    - grafana.${ingress}
    secretName: grafana-tls
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secret
  namespace: kube-system
  labels:
    app: grafana
    role: monitoring
data:
  user: YWRtaW4=
  password: YWRtaW4=
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/name: "grafana"
    prometheus.io/port: "3000"
  name: grafana
  namespace: kube-system
  labels:
    component: grafana
spec:
  type: ClusterIP
  ports:
  - name: web
    port: 3000
    protocol: TCP
  selector:
    app: grafana
    role: monitoring
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: grafana
  namespace: kube-system
  labels:
    app: grafana
    role: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
      role: monitoring
  template:
    metadata:
      labels:
        app: grafana
        role: monitoring
    spec:
      # This feature requires 1.6 Kubernetes. Its needed otherwise Grafana won't fetch the needed metadata from Prometheus
      #initContainers:
      #- name: init-prometheus
      #  image: busybox:1.27
      #  command: ['sh', '-c', 'until wget -T 5 -qO- http://prometheus-web:8080/status > /dev/null; do echo waiting for Prometheus; sleep 2; done;']
      containers:
      - name: grafana
        image: grafana/grafana:4.6.3
        imagePullPolicy: IfNotPresent
        env:
        - name: GF_AUTH_BASIC_ENABLED
          value: "true"
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "false"
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: grafana-secret
              key: user
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secret
              key: password
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/grafana-storage
        ports:
        - name: web
          containerPort: 3000
        resources:
          requests:
            memory: 100Mi
            cpu: 100m
          limits:
            memory: 200Mi
            cpu: 200m
      - name: grafana-watcher
        image: quay.io/coreos/grafana-watcher:v0.0.4
        imagePullPolicy: IfNotPresent
        args:
        - --watch-dir=/config
        - --grafana-url=http://localhost:3000
        env:
        - name: GRAFANA_USER
          valueFrom:
            secretKeyRef:
              name: grafana-secret
              key: user
        - name: GRAFANA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secret
              key: password
        volumeMounts:
        - name: grafana-config
          mountPath: /config
        resources:
          requests:
            memory: 16Mi
            cpu: 50m
          limits:
            memory: 32Mi
            cpu: 100m
      volumes:
      - name: grafana-storage
        emptyDir: {}
      - name: grafana-config
        configMap:
          name: grafana-config

